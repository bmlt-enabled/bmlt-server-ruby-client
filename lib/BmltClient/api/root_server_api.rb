=begin
#BMLT

#BMLT Admin API Documentation

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0-SNAPSHOT

=end

require 'cgi'

module BmltClient
  class RootServerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Revokes a token
    # Revoke token and logout.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auth_logout(opts = {})
      auth_logout_with_http_info(opts)
      nil
    end

    # Revokes a token
    # Revoke token and logout.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def auth_logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.auth_logout ...'
      end
      # resource path
      local_var_path = '/api/v1/auth/logout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.auth_logout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#auth_logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revokes and issues a new token
    # Refresh token.
    # @param [Hash] opts the optional parameters
    # @return [Token]
    def auth_refresh(opts = {})
      data, _status_code, _headers = auth_refresh_with_http_info(opts)
      data
    end

    # Revokes and issues a new token
    # Refresh token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Token, Integer, Hash)>] Token data, response status code and response headers
    def auth_refresh_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.auth_refresh ...'
      end
      # resource path
      local_var_path = '/api/v1/auth/refresh'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Token'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.auth_refresh",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#auth_refresh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a token
    # Exchange credentials for a new token
    # @param token_credentials [TokenCredentials] User credentials
    # @param [Hash] opts the optional parameters
    # @return [Token]
    def auth_token(token_credentials, opts = {})
      data, _status_code, _headers = auth_token_with_http_info(token_credentials, opts)
      data
    end

    # Creates a token
    # Exchange credentials for a new token
    # @param token_credentials [TokenCredentials] User credentials
    # @param [Hash] opts the optional parameters
    # @return [Array<(Token, Integer, Hash)>] Token data, response status code and response headers
    def auth_token_with_http_info(token_credentials, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.auth_token ...'
      end
      # verify the required parameter 'token_credentials' is set
      if @api_client.config.client_side_validation && token_credentials.nil?
        fail ArgumentError, "Missing the required parameter 'token_credentials' when calling RootServerApi.auth_token"
      end
      # resource path
      local_var_path = '/api/v1/auth/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(token_credentials)

      # return_type
      return_type = opts[:debug_return_type] || 'Token'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RootServerApi.auth_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#auth_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tests some errors
    # Tests some errors.
    # @param error_test [ErrorTest] Pass in error test object.
    # @param [Hash] opts the optional parameters
    # @return [ErrorTest]
    def create_error_test(error_test, opts = {})
      data, _status_code, _headers = create_error_test_with_http_info(error_test, opts)
      data
    end

    # Tests some errors
    # Tests some errors.
    # @param error_test [ErrorTest] Pass in error test object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorTest, Integer, Hash)>] ErrorTest data, response status code and response headers
    def create_error_test_with_http_info(error_test, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.create_error_test ...'
      end
      # verify the required parameter 'error_test' is set
      if @api_client.config.client_side_validation && error_test.nil?
        fail ArgumentError, "Missing the required parameter 'error_test' when calling RootServerApi.create_error_test"
      end
      # resource path
      local_var_path = '/api/v1/errortest'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(error_test)

      # return_type
      return_type = opts[:debug_return_type] || 'ErrorTest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.create_error_test",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#create_error_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a format
    # Creates a format.
    # @param format_create [FormatCreate] Pass in format object
    # @param [Hash] opts the optional parameters
    # @return [Format]
    def create_format(format_create, opts = {})
      data, _status_code, _headers = create_format_with_http_info(format_create, opts)
      data
    end

    # Creates a format
    # Creates a format.
    # @param format_create [FormatCreate] Pass in format object
    # @param [Hash] opts the optional parameters
    # @return [Array<(Format, Integer, Hash)>] Format data, response status code and response headers
    def create_format_with_http_info(format_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.create_format ...'
      end
      # verify the required parameter 'format_create' is set
      if @api_client.config.client_side_validation && format_create.nil?
        fail ArgumentError, "Missing the required parameter 'format_create' when calling RootServerApi.create_format"
      end
      # resource path
      local_var_path = '/api/v1/formats'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(format_create)

      # return_type
      return_type = opts[:debug_return_type] || 'Format'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.create_format",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#create_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a meeting
    # Creates a meeting.
    # @param meeting_create [MeetingCreate] Pass in meeting object
    # @param [Hash] opts the optional parameters
    # @return [Meeting]
    def create_meeting(meeting_create, opts = {})
      data, _status_code, _headers = create_meeting_with_http_info(meeting_create, opts)
      data
    end

    # Creates a meeting
    # Creates a meeting.
    # @param meeting_create [MeetingCreate] Pass in meeting object
    # @param [Hash] opts the optional parameters
    # @return [Array<(Meeting, Integer, Hash)>] Meeting data, response status code and response headers
    def create_meeting_with_http_info(meeting_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.create_meeting ...'
      end
      # verify the required parameter 'meeting_create' is set
      if @api_client.config.client_side_validation && meeting_create.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_create' when calling RootServerApi.create_meeting"
      end
      # resource path
      local_var_path = '/api/v1/meetings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(meeting_create)

      # return_type
      return_type = opts[:debug_return_type] || 'Meeting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.create_meeting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#create_meeting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a service body
    # Creates a service body.
    # @param service_body_create [ServiceBodyCreate] Pass in service body object
    # @param [Hash] opts the optional parameters
    # @return [ServiceBody]
    def create_service_body(service_body_create, opts = {})
      data, _status_code, _headers = create_service_body_with_http_info(service_body_create, opts)
      data
    end

    # Creates a service body
    # Creates a service body.
    # @param service_body_create [ServiceBodyCreate] Pass in service body object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceBody, Integer, Hash)>] ServiceBody data, response status code and response headers
    def create_service_body_with_http_info(service_body_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.create_service_body ...'
      end
      # verify the required parameter 'service_body_create' is set
      if @api_client.config.client_side_validation && service_body_create.nil?
        fail ArgumentError, "Missing the required parameter 'service_body_create' when calling RootServerApi.create_service_body"
      end
      # resource path
      local_var_path = '/api/v1/servicebodies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(service_body_create)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.create_service_body",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#create_service_body\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a user
    # Creates a user.
    # @param user_create [UserCreate] Pass in user object
    # @param [Hash] opts the optional parameters
    # @return [User]
    def create_user(user_create, opts = {})
      data, _status_code, _headers = create_user_with_http_info(user_create, opts)
      data
    end

    # Creates a user
    # Creates a user.
    # @param user_create [UserCreate] Pass in user object
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def create_user_with_http_info(user_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.create_user ...'
      end
      # verify the required parameter 'user_create' is set
      if @api_client.config.client_side_validation && user_create.nil?
        fail ArgumentError, "Missing the required parameter 'user_create' when calling RootServerApi.create_user"
      end
      # resource path
      local_var_path = '/api/v1/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_create)

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.create_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a format
    # Deletes a format by id.
    # @param format_id [Integer] ID of format
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_format(format_id, opts = {})
      delete_format_with_http_info(format_id, opts)
      nil
    end

    # Deletes a format
    # Deletes a format by id.
    # @param format_id [Integer] ID of format
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_format_with_http_info(format_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.delete_format ...'
      end
      # verify the required parameter 'format_id' is set
      if @api_client.config.client_side_validation && format_id.nil?
        fail ArgumentError, "Missing the required parameter 'format_id' when calling RootServerApi.delete_format"
      end
      # resource path
      local_var_path = '/api/v1/formats/{formatId}'.sub('{' + 'formatId' + '}', CGI.escape(format_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.delete_format",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#delete_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a meeting
    # Deletes a meeting by id.
    # @param meeting_id [Integer] ID of meeting
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_meeting(meeting_id, opts = {})
      delete_meeting_with_http_info(meeting_id, opts)
      nil
    end

    # Deletes a meeting
    # Deletes a meeting by id.
    # @param meeting_id [Integer] ID of meeting
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_meeting_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.delete_meeting ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling RootServerApi.delete_meeting"
      end
      # resource path
      local_var_path = '/api/v1/meetings/{meetingId}'.sub('{' + 'meetingId' + '}', CGI.escape(meeting_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.delete_meeting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#delete_meeting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a service body
    # Deletes a service body by id.
    # @param service_body_id [Integer] ID of service body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_body(service_body_id, opts = {})
      delete_service_body_with_http_info(service_body_id, opts)
      nil
    end

    # Deletes a service body
    # Deletes a service body by id.
    # @param service_body_id [Integer] ID of service body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_service_body_with_http_info(service_body_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.delete_service_body ...'
      end
      # verify the required parameter 'service_body_id' is set
      if @api_client.config.client_side_validation && service_body_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_body_id' when calling RootServerApi.delete_service_body"
      end
      # resource path
      local_var_path = '/api/v1/servicebodies/{serviceBodyId}'.sub('{' + 'serviceBodyId' + '}', CGI.escape(service_body_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.delete_service_body",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#delete_service_body\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a user
    # Deletes a user by id
    # @param user_id [Integer] ID of user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user(user_id, opts = {})
      delete_user_with_http_info(user_id, opts)
      nil
    end

    # Deletes a user
    # Deletes a user by id
    # @param user_id [Integer] ID of user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.delete_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RootServerApi.delete_user"
      end
      # resource path
      local_var_path = '/api/v1/users/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.delete_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a format
    # Retrieve a format
    # @param format_id [Integer] ID of format
    # @param [Hash] opts the optional parameters
    # @return [Format]
    def get_format(format_id, opts = {})
      data, _status_code, _headers = get_format_with_http_info(format_id, opts)
      data
    end

    # Retrieves a format
    # Retrieve a format
    # @param format_id [Integer] ID of format
    # @param [Hash] opts the optional parameters
    # @return [Array<(Format, Integer, Hash)>] Format data, response status code and response headers
    def get_format_with_http_info(format_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_format ...'
      end
      # verify the required parameter 'format_id' is set
      if @api_client.config.client_side_validation && format_id.nil?
        fail ArgumentError, "Missing the required parameter 'format_id' when calling RootServerApi.get_format"
      end
      # resource path
      local_var_path = '/api/v1/formats/{formatId}'.sub('{' + 'formatId' + '}', CGI.escape(format_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Format'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.get_format",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves formats
    # Retrieve formats
    # @param [Hash] opts the optional parameters
    # @return [Array<Format>]
    def get_formats(opts = {})
      data, _status_code, _headers = get_formats_with_http_info(opts)
      data
    end

    # Retrieves formats
    # Retrieve formats
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Format>, Integer, Hash)>] Array<Format> data, response status code and response headers
    def get_formats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_formats ...'
      end
      # resource path
      local_var_path = '/api/v1/formats'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Format>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.get_formats",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_formats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves laravel log
    # Retrieve the laravel log if it exists.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_laravel_log(opts = {})
      data, _status_code, _headers = get_laravel_log_with_http_info(opts)
      data
    end

    # Retrieves laravel log
    # Retrieve the laravel log if it exists.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_laravel_log_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_laravel_log ...'
      end
      # resource path
      local_var_path = '/api/v1/logs/laravel'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/gzip', 'application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.get_laravel_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_laravel_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a meeting
    # Retrieve a meeting.
    # @param meeting_id [Integer] ID of meeting
    # @param [Hash] opts the optional parameters
    # @return [Meeting]
    def get_meeting(meeting_id, opts = {})
      data, _status_code, _headers = get_meeting_with_http_info(meeting_id, opts)
      data
    end

    # Retrieves a meeting
    # Retrieve a meeting.
    # @param meeting_id [Integer] ID of meeting
    # @param [Hash] opts the optional parameters
    # @return [Array<(Meeting, Integer, Hash)>] Meeting data, response status code and response headers
    def get_meeting_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_meeting ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling RootServerApi.get_meeting"
      end
      # resource path
      local_var_path = '/api/v1/meetings/{meetingId}'.sub('{' + 'meetingId' + '}', CGI.escape(meeting_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Meeting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.get_meeting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_meeting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve changes for a meeting
    # Retrieve all changes made to a specific meeting.
    # @param meeting_id [Integer] ID of the meeting
    # @param [Hash] opts the optional parameters
    # @return [Array<MeetingChangeResource>]
    def get_meeting_changes(meeting_id, opts = {})
      data, _status_code, _headers = get_meeting_changes_with_http_info(meeting_id, opts)
      data
    end

    # Retrieve changes for a meeting
    # Retrieve all changes made to a specific meeting.
    # @param meeting_id [Integer] ID of the meeting
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MeetingChangeResource>, Integer, Hash)>] Array<MeetingChangeResource> data, response status code and response headers
    def get_meeting_changes_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_meeting_changes ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling RootServerApi.get_meeting_changes"
      end
      # resource path
      local_var_path = '/api/v1/meetings/{meetingId}/changes'.sub('{' + 'meetingId' + '}', CGI.escape(meeting_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MeetingChangeResource>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.get_meeting_changes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_meeting_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves meetings
    # Retrieve meetings for authenticated user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :meeting_ids comma delimited meeting ids
    # @option opts [String] :days comma delimited day ids between 0-6
    # @option opts [String] :service_body_ids comma delimited service body ids
    # @option opts [String] :search_string string
    # @return [Array<Meeting>]
    def get_meetings(opts = {})
      data, _status_code, _headers = get_meetings_with_http_info(opts)
      data
    end

    # Retrieves meetings
    # Retrieve meetings for authenticated user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :meeting_ids comma delimited meeting ids
    # @option opts [String] :days comma delimited day ids between 0-6
    # @option opts [String] :service_body_ids comma delimited service body ids
    # @option opts [String] :search_string string
    # @return [Array<(Array<Meeting>, Integer, Hash)>] Array<Meeting> data, response status code and response headers
    def get_meetings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_meetings ...'
      end
      # resource path
      local_var_path = '/api/v1/meetings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'meetingIds'] = opts[:'meeting_ids'] if !opts[:'meeting_ids'].nil?
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?
      query_params[:'serviceBodyIds'] = opts[:'service_body_ids'] if !opts[:'service_body_ids'].nil?
      query_params[:'searchString'] = opts[:'search_string'] if !opts[:'search_string'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Meeting>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.get_meetings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_meetings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a root server
    # Retrieve a single root server id.
    # @param root_server_id [Integer] ID of root server
    # @param [Hash] opts the optional parameters
    # @return [RootServer]
    def get_root_server(root_server_id, opts = {})
      data, _status_code, _headers = get_root_server_with_http_info(root_server_id, opts)
      data
    end

    # Retrieves a root server
    # Retrieve a single root server id.
    # @param root_server_id [Integer] ID of root server
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootServer, Integer, Hash)>] RootServer data, response status code and response headers
    def get_root_server_with_http_info(root_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_root_server ...'
      end
      # verify the required parameter 'root_server_id' is set
      if @api_client.config.client_side_validation && root_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'root_server_id' when calling RootServerApi.get_root_server"
      end
      # resource path
      local_var_path = '/api/v1/rootservers/{rootServerId}'.sub('{' + 'rootServerId' + '}', CGI.escape(root_server_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RootServer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RootServerApi.get_root_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_root_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves root servers
    # Retrieve root servers.
    # @param [Hash] opts the optional parameters
    # @return [Array<RootServer>]
    def get_root_servers(opts = {})
      data, _status_code, _headers = get_root_servers_with_http_info(opts)
      data
    end

    # Retrieves root servers
    # Retrieve root servers.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RootServer>, Integer, Hash)>] Array<RootServer> data, response status code and response headers
    def get_root_servers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_root_servers ...'
      end
      # resource path
      local_var_path = '/api/v1/rootservers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RootServer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RootServerApi.get_root_servers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_root_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves service bodies
    # Retrieve service bodies for authenticated user.
    # @param [Hash] opts the optional parameters
    # @return [Array<ServiceBody>]
    def get_service_bodies(opts = {})
      data, _status_code, _headers = get_service_bodies_with_http_info(opts)
      data
    end

    # Retrieves service bodies
    # Retrieve service bodies for authenticated user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ServiceBody>, Integer, Hash)>] Array<ServiceBody> data, response status code and response headers
    def get_service_bodies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_service_bodies ...'
      end
      # resource path
      local_var_path = '/api/v1/servicebodies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ServiceBody>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.get_service_bodies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_service_bodies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a service body
    # Retrieve a single service body by id.
    # @param service_body_id [Integer] ID of service body
    # @param [Hash] opts the optional parameters
    # @return [ServiceBody]
    def get_service_body(service_body_id, opts = {})
      data, _status_code, _headers = get_service_body_with_http_info(service_body_id, opts)
      data
    end

    # Retrieves a service body
    # Retrieve a single service body by id.
    # @param service_body_id [Integer] ID of service body
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceBody, Integer, Hash)>] ServiceBody data, response status code and response headers
    def get_service_body_with_http_info(service_body_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_service_body ...'
      end
      # verify the required parameter 'service_body_id' is set
      if @api_client.config.client_side_validation && service_body_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_body_id' when calling RootServerApi.get_service_body"
      end
      # resource path
      local_var_path = '/api/v1/servicebodies/{serviceBodyId}'.sub('{' + 'serviceBodyId' + '}', CGI.escape(service_body_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.get_service_body",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_service_body\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a single user
    # Retrieve single user.
    # @param user_id [Integer] ID of user
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_user(user_id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(user_id, opts)
      data
    end

    # Retrieves a single user
    # Retrieve single user.
    # @param user_id [Integer] ID of user
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RootServerApi.get_user"
      end
      # resource path
      local_var_path = '/api/v1/users/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.get_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves users
    # Retrieve users for authenticated user.
    # @param [Hash] opts the optional parameters
    # @return [Array<User>]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # Retrieves users
    # Retrieve users for authenticated user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<User>, Integer, Hash)>] Array<User> data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.get_users ...'
      end
      # resource path
      local_var_path = '/api/v1/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<User>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patches a user
    # Patches a user by id.
    # @param user_id [Integer] ID of user
    # @param user_partial_update [UserPartialUpdate] Pass in fields you want to update.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def partial_update_user(user_id, user_partial_update, opts = {})
      partial_update_user_with_http_info(user_id, user_partial_update, opts)
      nil
    end

    # Patches a user
    # Patches a user by id.
    # @param user_id [Integer] ID of user
    # @param user_partial_update [UserPartialUpdate] Pass in fields you want to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def partial_update_user_with_http_info(user_id, user_partial_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.partial_update_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RootServerApi.partial_update_user"
      end
      # verify the required parameter 'user_partial_update' is set
      if @api_client.config.client_side_validation && user_partial_update.nil?
        fail ArgumentError, "Missing the required parameter 'user_partial_update' when calling RootServerApi.partial_update_user"
      end
      # resource path
      local_var_path = '/api/v1/users/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_partial_update)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.partial_update_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#partial_update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patches a format
    # Patches a single format by id.
    # @param format_id [Integer] ID of format
    # @param format_partial_update [FormatPartialUpdate] Pass in fields you want to update.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_format(format_id, format_partial_update, opts = {})
      patch_format_with_http_info(format_id, format_partial_update, opts)
      nil
    end

    # Patches a format
    # Patches a single format by id.
    # @param format_id [Integer] ID of format
    # @param format_partial_update [FormatPartialUpdate] Pass in fields you want to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def patch_format_with_http_info(format_id, format_partial_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.patch_format ...'
      end
      # verify the required parameter 'format_id' is set
      if @api_client.config.client_side_validation && format_id.nil?
        fail ArgumentError, "Missing the required parameter 'format_id' when calling RootServerApi.patch_format"
      end
      # verify the required parameter 'format_partial_update' is set
      if @api_client.config.client_side_validation && format_partial_update.nil?
        fail ArgumentError, "Missing the required parameter 'format_partial_update' when calling RootServerApi.patch_format"
      end
      # resource path
      local_var_path = '/api/v1/formats/{formatId}'.sub('{' + 'formatId' + '}', CGI.escape(format_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(format_partial_update)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.patch_format",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#patch_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patches a meeting
    # Patches a meeting by id
    # @param meeting_id [Integer] ID of meeting
    # @param meeting_partial_update [MeetingPartialUpdate] Pass in fields you want to update.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_meeting(meeting_id, meeting_partial_update, opts = {})
      patch_meeting_with_http_info(meeting_id, meeting_partial_update, opts)
      nil
    end

    # Patches a meeting
    # Patches a meeting by id
    # @param meeting_id [Integer] ID of meeting
    # @param meeting_partial_update [MeetingPartialUpdate] Pass in fields you want to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def patch_meeting_with_http_info(meeting_id, meeting_partial_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.patch_meeting ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling RootServerApi.patch_meeting"
      end
      # verify the required parameter 'meeting_partial_update' is set
      if @api_client.config.client_side_validation && meeting_partial_update.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_partial_update' when calling RootServerApi.patch_meeting"
      end
      # resource path
      local_var_path = '/api/v1/meetings/{meetingId}'.sub('{' + 'meetingId' + '}', CGI.escape(meeting_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(meeting_partial_update)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.patch_meeting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#patch_meeting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patches a service body
    # Patches a single service body by id.
    # @param service_body_id [Integer] ID of service body
    # @param service_body_partial_update [ServiceBodyPartialUpdate] Pass in fields you want to update.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_service_body(service_body_id, service_body_partial_update, opts = {})
      patch_service_body_with_http_info(service_body_id, service_body_partial_update, opts)
      nil
    end

    # Patches a service body
    # Patches a single service body by id.
    # @param service_body_id [Integer] ID of service body
    # @param service_body_partial_update [ServiceBodyPartialUpdate] Pass in fields you want to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def patch_service_body_with_http_info(service_body_id, service_body_partial_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.patch_service_body ...'
      end
      # verify the required parameter 'service_body_id' is set
      if @api_client.config.client_side_validation && service_body_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_body_id' when calling RootServerApi.patch_service_body"
      end
      # verify the required parameter 'service_body_partial_update' is set
      if @api_client.config.client_side_validation && service_body_partial_update.nil?
        fail ArgumentError, "Missing the required parameter 'service_body_partial_update' when calling RootServerApi.patch_service_body"
      end
      # resource path
      local_var_path = '/api/v1/servicebodies/{serviceBodyId}'.sub('{' + 'serviceBodyId' + '}', CGI.escape(service_body_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(service_body_partial_update)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.patch_service_body",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#patch_service_body\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a format
    # Updates a format.
    # @param format_id [Integer] ID of format
    # @param format_update [FormatUpdate] Pass in format object
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_format(format_id, format_update, opts = {})
      update_format_with_http_info(format_id, format_update, opts)
      nil
    end

    # Updates a format
    # Updates a format.
    # @param format_id [Integer] ID of format
    # @param format_update [FormatUpdate] Pass in format object
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_format_with_http_info(format_id, format_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.update_format ...'
      end
      # verify the required parameter 'format_id' is set
      if @api_client.config.client_side_validation && format_id.nil?
        fail ArgumentError, "Missing the required parameter 'format_id' when calling RootServerApi.update_format"
      end
      # verify the required parameter 'format_update' is set
      if @api_client.config.client_side_validation && format_update.nil?
        fail ArgumentError, "Missing the required parameter 'format_update' when calling RootServerApi.update_format"
      end
      # resource path
      local_var_path = '/api/v1/formats/{formatId}'.sub('{' + 'formatId' + '}', CGI.escape(format_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(format_update)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.update_format",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#update_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a meeting
    # Updates a meeting.
    # @param meeting_id [Integer] ID of meeting
    # @param meeting_update [MeetingUpdate] Pass in meeting object
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_meeting(meeting_id, meeting_update, opts = {})
      update_meeting_with_http_info(meeting_id, meeting_update, opts)
      nil
    end

    # Updates a meeting
    # Updates a meeting.
    # @param meeting_id [Integer] ID of meeting
    # @param meeting_update [MeetingUpdate] Pass in meeting object
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_meeting_with_http_info(meeting_id, meeting_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.update_meeting ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling RootServerApi.update_meeting"
      end
      # verify the required parameter 'meeting_update' is set
      if @api_client.config.client_side_validation && meeting_update.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_update' when calling RootServerApi.update_meeting"
      end
      # resource path
      local_var_path = '/api/v1/meetings/{meetingId}'.sub('{' + 'meetingId' + '}', CGI.escape(meeting_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(meeting_update)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.update_meeting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#update_meeting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Service Body
    # Updates a single service body.
    # @param service_body_id [Integer] ID of service body
    # @param service_body_update [ServiceBodyUpdate] Pass in service body object
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_service_body(service_body_id, service_body_update, opts = {})
      update_service_body_with_http_info(service_body_id, service_body_update, opts)
      nil
    end

    # Updates a Service Body
    # Updates a single service body.
    # @param service_body_id [Integer] ID of service body
    # @param service_body_update [ServiceBodyUpdate] Pass in service body object
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_service_body_with_http_info(service_body_id, service_body_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.update_service_body ...'
      end
      # verify the required parameter 'service_body_id' is set
      if @api_client.config.client_side_validation && service_body_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_body_id' when calling RootServerApi.update_service_body"
      end
      # verify the required parameter 'service_body_update' is set
      if @api_client.config.client_side_validation && service_body_update.nil?
        fail ArgumentError, "Missing the required parameter 'service_body_update' when calling RootServerApi.update_service_body"
      end
      # resource path
      local_var_path = '/api/v1/servicebodies/{serviceBodyId}'.sub('{' + 'serviceBodyId' + '}', CGI.escape(service_body_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(service_body_update)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.update_service_body",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#update_service_body\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update single user
    # Updates a user.
    # @param user_id [Integer] ID of user
    # @param user_update [UserUpdate] Pass in user object
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_user(user_id, user_update, opts = {})
      update_user_with_http_info(user_id, user_update, opts)
      nil
    end

    # Update single user
    # Updates a user.
    # @param user_id [Integer] ID of user
    # @param user_update [UserUpdate] Pass in user object
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_user_with_http_info(user_id, user_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RootServerApi.update_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling RootServerApi.update_user"
      end
      # verify the required parameter 'user_update' is set
      if @api_client.config.client_side_validation && user_update.nil?
        fail ArgumentError, "Missing the required parameter 'user_update' when calling RootServerApi.update_user"
      end
      # resource path
      local_var_path = '/api/v1/users/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_update)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bmltToken']

      new_options = opts.merge(
        :operation => :"RootServerApi.update_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RootServerApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
