=begin
#BMLT

#BMLT Admin API Documentation

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.17.0-SNAPSHOT

=end

require 'date'
require 'time'

module BmltClient
  class RootServerBaseStatisticsMeetings
    attr_accessor :num_total

    attr_accessor :num_in_person

    attr_accessor :num_virtual

    attr_accessor :num_hybrid

    attr_accessor :num_unknown

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'num_total' => :'numTotal',
        :'num_in_person' => :'numInPerson',
        :'num_virtual' => :'numVirtual',
        :'num_hybrid' => :'numHybrid',
        :'num_unknown' => :'numUnknown'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'num_total' => :'Integer',
        :'num_in_person' => :'Integer',
        :'num_virtual' => :'Integer',
        :'num_hybrid' => :'Integer',
        :'num_unknown' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BmltClient::RootServerBaseStatisticsMeetings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BmltClient::RootServerBaseStatisticsMeetings`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'num_total')
        self.num_total = attributes[:'num_total']
      else
        self.num_total = nil
      end

      if attributes.key?(:'num_in_person')
        self.num_in_person = attributes[:'num_in_person']
      else
        self.num_in_person = nil
      end

      if attributes.key?(:'num_virtual')
        self.num_virtual = attributes[:'num_virtual']
      else
        self.num_virtual = nil
      end

      if attributes.key?(:'num_hybrid')
        self.num_hybrid = attributes[:'num_hybrid']
      else
        self.num_hybrid = nil
      end

      if attributes.key?(:'num_unknown')
        self.num_unknown = attributes[:'num_unknown']
      else
        self.num_unknown = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @num_total.nil?
        invalid_properties.push('invalid value for "num_total", num_total cannot be nil.')
      end

      if @num_in_person.nil?
        invalid_properties.push('invalid value for "num_in_person", num_in_person cannot be nil.')
      end

      if @num_virtual.nil?
        invalid_properties.push('invalid value for "num_virtual", num_virtual cannot be nil.')
      end

      if @num_hybrid.nil?
        invalid_properties.push('invalid value for "num_hybrid", num_hybrid cannot be nil.')
      end

      if @num_unknown.nil?
        invalid_properties.push('invalid value for "num_unknown", num_unknown cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @num_total.nil?
      return false if @num_in_person.nil?
      return false if @num_virtual.nil?
      return false if @num_hybrid.nil?
      return false if @num_unknown.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] num_total Value to be assigned
    def num_total=(num_total)
      if num_total.nil?
        fail ArgumentError, 'num_total cannot be nil'
      end

      @num_total = num_total
    end

    # Custom attribute writer method with validation
    # @param [Object] num_in_person Value to be assigned
    def num_in_person=(num_in_person)
      if num_in_person.nil?
        fail ArgumentError, 'num_in_person cannot be nil'
      end

      @num_in_person = num_in_person
    end

    # Custom attribute writer method with validation
    # @param [Object] num_virtual Value to be assigned
    def num_virtual=(num_virtual)
      if num_virtual.nil?
        fail ArgumentError, 'num_virtual cannot be nil'
      end

      @num_virtual = num_virtual
    end

    # Custom attribute writer method with validation
    # @param [Object] num_hybrid Value to be assigned
    def num_hybrid=(num_hybrid)
      if num_hybrid.nil?
        fail ArgumentError, 'num_hybrid cannot be nil'
      end

      @num_hybrid = num_hybrid
    end

    # Custom attribute writer method with validation
    # @param [Object] num_unknown Value to be assigned
    def num_unknown=(num_unknown)
      if num_unknown.nil?
        fail ArgumentError, 'num_unknown cannot be nil'
      end

      @num_unknown = num_unknown
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          num_total == o.num_total &&
          num_in_person == o.num_in_person &&
          num_virtual == o.num_virtual &&
          num_hybrid == o.num_hybrid &&
          num_unknown == o.num_unknown
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [num_total, num_in_person, num_virtual, num_hybrid, num_unknown].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = BmltClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
